name: Claude Code Review

# This workflow provides automated PR review with progress tracking

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened, labeled]

jobs:
  review-with-tracking:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: PR Review with Progress Tracking
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Enable progress tracking (shows checkboxes in PR comments)
          track_progress: true

          # Use sticky comments (updates one comment instead of creating multiple)
          use_sticky_comment: true

          # Enable commit signing for verified commits
          use_commit_signing: true

          # Optional: Trigger only when a specific label is added (uncomment to enable)
          # label_trigger: "needs-review"

          # Optional: Allow specific bots to trigger Claude (uncomment to enable)
          # allowed_bots: "renovate"  # Or use "*" for all bots, or comma-separated list

          # Your custom review instructions
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Perform a comprehensive code review with the following focus areas:

            1. **Code Quality**
               - Clean code principles and best practices
               - Proper error handling and edge cases
               - Code readability and maintainability

            2. **Security**
               - Check for potential security vulnerabilities
               - Validate input sanitization
               - Review authentication/authorization logic

            3. **Performance**
               - Identify potential performance bottlenecks
               - Review database queries for efficiency
               - Check for memory leaks or resource issues

            4. **Testing**
               - Verify adequate test coverage
               - Review test quality and edge cases
               - Check for missing test scenarios

            5. **Documentation**
               - Ensure code is properly documented
               - Verify README updates for new features
               - Check API documentation accuracy

            Provide detailed feedback using inline comments for specific issues.
            Use top-level comments for general observations or praise.

          # Tools for comprehensive PR review
          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*)"
